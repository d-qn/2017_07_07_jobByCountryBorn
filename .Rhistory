#   ungroup() %>% View()
## Compute deviation for detailed isco codes but for Swiss vs non-Swiss
datab <- data %>%
filter(isco >= 1000) %>%
mutate(origin = ifelse(lieuNaissance == "Suisse", "Suisse", "Etranger")) %>%
group_by(isco, description, origin) %>%
summarise(valeur = sum(valeur, na.rm = T)) %>%
ungroup() %>%
group_by(isco, description) %>%
mutate(totIsco = sum(valeur, na.rm = T)) %>%
ungroup() %>%
mutate(share = (valeur / totIsco) * 100)
datac <- data %>%
filter(isco >= 1000) %>%
mutate(origin = ifelse(lieuNaissance == "Suisse", "Suisse", "Etranger")) %>%
mutate(group = isco %/% 1000) %>%
group_by(group, origin) %>%
summarise(totGroupOri = sum(valeur, na.rm = T)) %>%
ungroup() %>%
group_by(group) %>%
mutate(totGroup = sum(totGroupOri), shareGroup = (totGroupOri / totGroup)) %>%
ungroup() %>%
mutate(shareGroupTot = (totGroup / (sum(totGroup) /2 ) )) %>%
group_by(origin) %>%
mutate(totOri = sum(totGroupOri)) %>%
ungroup() %>%
mutate(sharebyOri = (totGroupOri / totOri), dev = sharebyOri - shareGroupTot)
if(displayExplore) {
datac %>% ggplot(aes(group, shareGroup)) + geom_bar(aes(fill = origin), position = "dodge", stat="identity")
datac %>% ggplot(aes(group, shareGroup)) + geom_bar(aes(fill = origin), position = "stack", stat="identity") + swi_theme()
}
# https://learnr.wordpress.com/2009/03/29/ggplot2_marimekko_mosaic_chart/
library(ggiraph)
# compute rect positions
dd <- datac %>% select(group, origin, totGroupOri, shareGroupTot, shareGroup) %>%
group_by(origin) %>% arrange(desc(group)) %>%
mutate(ymax = cumsum(shareGroupTot), ymin = ymax - shareGroupTot) %>%
ungroup() %>%
group_by(group) %>% arrange(desc(origin)) %>%
mutate(xmax = cumsum(shareGroup), xmin = xmax - shareGroup) %>%
ungroup()
# compute the average % non-Suisse for all jobs
tot <- dd %>% group_by(origin) %>%
summarise(sum(totGroupOri)) %>% ungroup()
meanCH <- (tot[tot$origin == "Suisse", 2] / tot[,2] %>%
sum()) %>% unlist(use.names = F)
labels <- dd %>% filter(origin == "Suisse") %>%
mutate(y = ymax - 0.01, yRange = (ymax - ymin)* 100) %>%
select(group, origin, xmin, y, yRange) %>%
ungroup()
lang <- 'FR'
plotProportionalStackedBar <- function(ddd, txt) {
# add translation
labels$label <- txt[as.character(labels$group), lang]
ddd$label <- txt[as.character(ddd$group), lang]
ddd$orilab <- txt[ifelse(ddd$origin == "Suisse", "ori.CH", "ori.nonCH"), lang]
ddd %<>% mutate(id = paste0(origin, group)) %>%
mutate(tp = paste0(#'<div class = "tp">',
"<em>", label, "</em><br><hr>",
orilab, " <b>", round(shareGroup * 100, 1), "%</b><br>", "(",
prettyNum(round(totGroupOri), big.mark = " ", mode = "character"), " ",
txt["job", lang], ")"#,
# '</div>'
)) #%>% htmltools::htmlEscape(TRUE)
gp <- ggplot(ddd) +
geom_rect_interactive(
aes(ymin = ymin, ymax = ymax, xmin = xmin, xmax = xmax, fill = origin, data_id = id, tooltip = tp),
colour = "white", size = 0.2, alpha = 0.9
) +
scale_x_continuous(position = "top", expand = c(0.01, 0.01),
labels = scales::percent, breaks = scales::pretty_breaks(n = 4)) +
scale_y_continuous(expand = c(0,0), limits = c(0, 1.025)) +
scale_fill_manual(values = c('#4c6570', '#b15953'),
guide_legend(title = txt['leg.title', lang]),
breaks = c(txt["ori.CH", lang], txt[ "ori.nonCH", lang])) +
swi_theme(y_gridlines = F, base_size = 13) +
theme(
axis.line.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
axis.title = element_blank(),
axis.ticks.length = unit(0.2,"cm"),
plot.margin=unit(c(0, 0, 0.3, 0), "cm"),
legend.position = "top",
legend.key.height = unit(9, "points"),
legend.title = element_text(size = 11),
legend.text = element_text(size = 10)
)
gp2 <- gp +
geom_segment(data = tibble(x = meanCH, xend = meanCH, y = 0, yend = 1),
aes(x = x, y = y, xend = xend, yend = yend),
linetype = 2, colour = "#e3cda1", size = 0.8, alpha = 0.7) +
annotate(geom = "text", x = meanCH,  y = 1.025,
label = txt["average" , lang], vjust = 1, hjust = 0.5,
family = "Open Sans Condensed", colour =  "darkgrey", size = 3) +
geom_text(data = labels,
aes(x = xmin + 0.008, y = y, label = label, size = yRange),
hjust = 0, vjust = 1, colour = "white", family = "Open Sans Condensed") +
scale_size_continuous(range = c(2.2, 6), guide = F)
gpi <- ggiraph(
code = {print(gp2)},
hover_css =  "fill:#0e1d25;cursor:pointer;",
tooltip_opacity = 0.8,
tooltip_extra_css = "padding:4px;margin:1px;border-radius:3px;background-color:#efe9e0;font-size:0.8em;",
tooltip_offx = -13,
pointsize = 11,
width = 1,
width_svg = 6,
height_svg = 7,
fonts = list(sans = "Open Sans Condensed", serif = "Open Sans Condensed")
)
# gpi$sizingPolicy$viewer$defaultWidth <- gpi$sizingPolicy$browser$defaultWidth <- gpi$sizingPolicy$defaultWidth <- "100%"
#
save_html(
tags$html(
tags$head(includeHTML("styles.html")),
tags$h2(HTML(txt['main.title', lang] )),
div(class = "descr", HTML(paste0('<img src="https://interactive.swissinfo.ch/assets/Interactive_icon.svg.png" width="10" align="top">&nbsp; ', txt['descr', lang] ))),
div(class="container", gpi),
div(id = "cite", HTML(paste0(txt['source', lang], ": ", txt['source.name', lang], " | @duc_qn | swissinfo.ch"))),
HTML(iframeresizer)
),
file =  paste0("occupationsByISCOandSwiss_", lang, ".html"), libdir = "js")
}
plotProportionalStackedBar(dd, txt)
chart.height <- 223
bg.colour <-  "#f2f2f2"
y.max <- adat %>% select(dev) %>% range() + c(0, 0.2)
adat %<>%
group_by(group) %>%
mutate(shareLieuNaissance = (countryTot / sum(countryTot) * 100)) %>%
ungroup()
plotOriginColumn <- function(adat, origin, txt) {
originLabel <- txt[origin, lang]
ddd <- adat %>%
filter(lieuNaissance == origin) %>%
mutate(
groupLabel = txt[as.character(group), lang],
tp = paste0(
groupLabel, "<br><b>",
ifelse(dev > 0, "+", ""), round(dev, 1), "</b> ", txt["tp.pp", lang], "<br>",
"(", round(share, 1), "% ", txt["tp.vs", lang], " ",
round(shareTot, 1), "% ", txt["tp.tot", lang], ")", "<br>",
prettyNum(round(valeur), big.mark = " ", mode = "character"), " ", txt["job", lang]
)
)
cchart <- hchart(
ddd, "column", hcaes(x = groupLabel, y = dev, tp, tp)
) %>%
hc_add_theme(hc_theme_swi) %>%
hc_legend(enabled = F) %>%
hc_chart(
backgroundColor = bg.colour, height = chart.height,
spacing = list(0,4,0,3), borderRadius = 4,
borderColor = "white", borderWidth = 1
) %>%
hc_xAxis(
offset = -102,
useHTML = T, lineColor = "#262626", tickLength = 0, lineWidth = 0,
labels = list(autoRotation = list(0), useHTML =  ifelse(lang == "AR", T, F),
padding = 8, y = 3,
style = list(fontSize = "0.7em", color = "#8c8c8c")), #)), textOverflow = 'none',)),
gridLineWidth = 0,  title = "", reversed = ifelse(lang == "AR", T, F)
) %>%
hc_yAxis(
useHTML = T, labels = list(format = '{value} pp', style = list(fontSize = "0.8em")),
gridLineWidth = 1,
minPadding = 0, maxPadding = 0, min = y.max[1], max = y.max[2],
title = "", opposite = ifelse(lang == "AR", T, F)
) %>%
hc_plotOptions(column = list(colorByPoint = T, colors = colors,
borderRadius = 2, borderColor = bg.colour,
borderWidth = 0,
pointPadding = 0.01, groupPadding = 0.01)
)
cchart %>% hc_tooltip(
hideDelay = 10, formatter = JS("function() { return this.point.tp; }"),
useHTML = T, borderWidth = 1,
backgroundColor = 'rgba(255,255,255,1)', style = list(padding = 3, fontSize = "0.7em")
) %>% hc_title(
floating = T, useHTML = T, text = originLabel, x = 5, y = 21,
style = list("fontSize" = "1.15em", "color" = '#22282a')
) %>%
hc_subtitle(
floating = T, align = "right", useHTML = T,
text = paste0(round(unique(ddd$shareLieuNaissance), 1), "% ", txt["st.job", lang]),
x = -5, y = 15,
style = list("fontSize" = "0.8em", "color" = '#22282a')
)
}
## Loop by language
lieuNaissance.ordered <- c(
"Allemagne", "France", "Italie", "Portugal", "Espagne", "Autre UE/AELE",
"Turquie", "Autre OCDE", "Autre Non OCDE", "Suisse"
)
stopifnot(lieuNaissance.ordered %in% adat$lieuNaissance, adat$lieuNaissance %in% lieuNaissance.ordered)
for (lang in colnames(txt)) {
cat("\n", lang)
plots <- lapply(lieuNaissance.ordered, function(nat) plotOriginColumn(adat, nat, txt))
source <- paste0(
txt['source', lang], ": ", htmlLink('http://nccr-onthemove.ch', txt['source.name', lang]), " | swissinfo.ch"
)
save_html(
tags$html(
tags$head(includeHTML(style_swi_highcharter())),
tags$h2(HTML(txt['main.title', lang])),
div(class = "descr", HTML(paste0('<img src="https://interactive.swissinfo.ch/assets/Interactive_icon.svg.png" width="12" align="top">&nbsp; ', txt['descr', lang]))),
#tags$h3(HTML(txt['h3', lang])),
div(class = "graphic", hw_grid(plots, ncol = 2, rowheight = chart.height)),
div(id = "cite", HTML(source)),
# div(class = "footer", HTML(txt['footer', lang])),
HTML(iframeresizer)
), #background = chart.area.bg,
file =  paste0("jobByCountryBirth_", lang, ".html"), libdir = "js")
}
displayExplore <- F
excel.file <- "data/4 Participation in the Sectors of the Labor Market_SwissInfo.xlsx"
translation.file <- "input/Job by nationality - Sheet1.csv"
library(tidyverse)
library(scales)
library(magrittr)
library(countrycode)
library(swiMap)
library(swiTheme)
### Getting data in packages
library(readxl)
### Interactive
library(htmltools)
library(swiRcharts)
library(highcharter)
colors <- c( "#193442", "#4c6570", "#7e827a", "#beb298", "#e3cda1", "#aa8959", "#d18768", "#b15953", "#72302f" )
#labelsLieuNaissance<- c("Suisse", "Allemagne")
# add the total by country and aggregate by isco group
adat <- data %>%
filter(isco >= 1000) %>%
mutate(group = factor(isco %/% 1000)) %>%
group_by(group, lieuNaissance) %>%
summarise(valeur = sum(valeur, na.rm = T)) %>%
ungroup()
displayExplore <- F
excel.file <- "data/4 Participation in the Sectors of the Labor Market_SwissInfo.xlsx"
translation.file <- "input/Job by nationality - Sheet1.csv"
library(tidyverse)
library(scales)
library(magrittr)
library(countrycode)
library(swiMap)
library(swiTheme)
### Getting data in packages
library(readxl)
### Interactive
library(htmltools)
library(swiRcharts)
library(highcharter)
txt <- loadTranslation(translation.file)
xls.read <- read_excel(excel.file, skip = 1, col_types = c("numeric", "text", rep("numeric", 12))) %>%
rename(
isco = X__1,
description = X__2
) %>% select(-N) %>% # N column is the sample figures (non extrapolated values)
suppressWarnings()
# make data long
data <- xls.read %>%
select(-Total) %>%
gather(lieuNaissance, valeur, -isco, -description)
# check Total is the same as Total dropped
check <- data %>% group_by(isco) %>% summarise(Total = sum(valeur, na.rm = T))
stopifnot(all.equal(check[,2] %>% unlist(use.names = F), xls.read %>% select(Total) %>% unlist(use.names = F)))
# add the total people by country of birth -> remov all negative codes!
byCountryTot <- data %>% filter(isco > 0) %>% #filter(isco != -8) %>%
group_by(lieuNaissance) %>%
summarise(countryTot = sum(valeur, na.rm = T)) %>%
ungroup()
## hack/clean-up: armed force have 3 digits, to be converted in 4 digit code
data %<>% mutate(isco = ifelse(isco > 0 & isco < 1000, 10, 1) * isco )
colors <- c( "#193442", "#4c6570", "#7e827a", "#beb298", "#e3cda1", "#aa8959", "#d18768", "#b15953", "#72302f" )
#labelsLieuNaissance<- c("Suisse", "Allemagne")
# add the total by country and aggregate by isco group
adat <- data %>%
filter(isco >= 1000) %>%
mutate(group = factor(isco %/% 1000)) %>%
group_by(group, lieuNaissance) %>%
summarise(valeur = sum(valeur, na.rm = T)) %>%
ungroup()
adat <- left_join(adat, byCountryTot) %>%
mutate(share = (valeur / countryTot) * 100)
byGroupTot <- adat %>% group_by(group) %>%
summarise(groupTot = sum(valeur, na.rm = T)) %>%
ungroup() %>%
mutate(shareTot = (groupTot / sum(groupTot)) * 100)
adat <- left_join(adat, byGroupTot %>% select(group, shareTot)) %>%
mutate(dev = share - shareTot)
# check
stopifnot(adat %>% group_by(lieuNaissance) %>% summarise(check = sum(dev)) %>%
ungroup %>% select(check) %>% unlist(use.names = F)  < 10e-2)
ggplot(data = adat) + geom_col(aes(x = group, y = dev, fill = group)) +
facet_wrap(~ reorder(lieuNaissance, -countryTot), nrow = 5) +
swi_theme() + scale_fill_manual(values = colors)
## Compute deviation for detailed isco codes
dataa <- left_join(
data %>% filter(isco >= 1000) %>% mutate(group = factor(isco %/% 1000)),
adat %>% select(group, lieuNaissance, countryTot, dev)
) %>% mutate(shareIsco = (valeur / countryTot) * 100)
byIscoTot <- dataa %>% group_by(isco) %>%
summarise(iscoTot = sum(valeur, na.rm = T)) %>%
ungroup() %>%
mutate(shareTot = (iscoTot / sum(iscoTot)) * 100)
dataa <- left_join(dataa, byIscoTot) %>%
mutate(devIsco = shareIsco - shareTot)
# check
dataa %>% group_by(lieuNaissance) %>% summarise(test = sum(shareTot), test2 = sum(shareIsco, na.rm = T))
dataa %>% ggplot() + geom_histogram(aes(devIsco), binwidth = 0.1) + swi_theme()
## SHow by citizenship deviation
dataa %>% filter(devIsco >= 2) %>%
knitr::kable(caption = "isco showing a deviation from 2 percentage point against expected/overall share")
# dataa %>% filter(abs(dev) >= 4) %>%
#   group_by(group, lieuNaissance) %>%
#   filter(devIsco > 1) %>%
#   select(description, valeur, devIsco) %>%
#   ungroup() %>% View()
## Compute deviation for detailed isco codes but for Swiss vs non-Swiss
datab <- data %>%
filter(isco >= 1000) %>%
mutate(origin = ifelse(lieuNaissance == "Suisse", "Suisse", "Etranger")) %>%
group_by(isco, description, origin) %>%
summarise(valeur = sum(valeur, na.rm = T)) %>%
ungroup() %>%
group_by(isco, description) %>%
mutate(totIsco = sum(valeur, na.rm = T)) %>%
ungroup() %>%
mutate(share = (valeur / totIsco) * 100)
datac <- data %>%
filter(isco >= 1000) %>%
mutate(origin = ifelse(lieuNaissance == "Suisse", "Suisse", "Etranger")) %>%
mutate(group = isco %/% 1000) %>%
group_by(group, origin) %>%
summarise(totGroupOri = sum(valeur, na.rm = T)) %>%
ungroup() %>%
group_by(group) %>%
mutate(totGroup = sum(totGroupOri), shareGroup = (totGroupOri / totGroup)) %>%
ungroup() %>%
mutate(shareGroupTot = (totGroup / (sum(totGroup) /2 ) )) %>%
group_by(origin) %>%
mutate(totOri = sum(totGroupOri)) %>%
ungroup() %>%
mutate(sharebyOri = (totGroupOri / totOri), dev = sharebyOri - shareGroupTot)
if(displayExplore) {
datac %>% ggplot(aes(group, shareGroup)) + geom_bar(aes(fill = origin), position = "dodge", stat="identity")
datac %>% ggplot(aes(group, shareGroup)) + geom_bar(aes(fill = origin), position = "stack", stat="identity") + swi_theme()
}
str(dataa)
str(adat)
str(data)
str(adat)
adat
dataa2 <- left_join(
data %>% filter(isco >= 1000) %>%
mutate(group = factor(isco %/% 1000), nat = ifelse(lieuNaissance == "Suisse", "Suisse", "etranger")),
adat %>% select(group, lieuNaissance, countryTot, dev)
) %>% mutate(shareIsco = (valeur / countryTot) * 100)
dataa2
dataa2 <- left_join(
data %>% filter(isco >= 1000) %>%
mutate(group = factor(isco %/% 1000), nat = ifelse(lieuNaissance == "Suisse", "Suisse", "etranger")) %>%
select(-lieuNaissance),
adat %>% select(group, lieuNaissance, countryTot, dev) %>% mutate(nat = ifelse(lieuNaissance == "Suisse", "Suisse", "etranger")) %>%
select(-lieuNaissance)
) %>% mutate(shareIsco = (valeur / countryTot) * 100)
dataa2
dataa2 <- left_join(
data %>% filter(isco >= 1000) %>%
mutate(group = factor(isco %/% 1000), nat = ifelse(lieuNaissance == "Suisse", "Suisse", "etranger")) %>%
select(-lieuNaissance),
adat %>% select(group, lieuNaissance, countryTot, dev) %>% mutate(nat = ifelse(lieuNaissance == "Suisse", "Suisse", "etranger")) %>%
select(-lieuNaissance)
)
str(dataa2)
dataa2
adat
tail(adat)
data %>% filter(isco >= 1000) %>%
mutate(group = factor(isco %/% 1000), nat = ifelse(lieuNaissance == "Suisse", "Suisse", "etranger")) %>%
select(-lieuNaissance)
dataa2 <- data %>% filter(isco >= 1000) %>%
mutate(group = factor(isco %/% 1000), nat = ifelse(lieuNaissance == "Suisse", "Suisse", "etranger")) %>%
select(-lieuNaissance)
dataa2
dataa2 %>% group_by(isco, nat) %>% mutate(valeur = sum(valeur))
dataa2 %>% group_by(isco, nat) %>% summarise(valeur = sum(valeur), nat = nat, group = group)
dataa2 %>% group_by(isco, nat) %>% summarise(valeur = sum(valeur))
dataa2 %>% group_by(isco, nat) %>% summarise(valeur = sum(valeur, na.rm = T))
dataa2 %>% group_by(isco, nat) %>% summarise(valeur = sum(valeur, na.rm = T)) %>% ungroup()
dataa2 %>% group_by(isco, nat) %>% summarise(valeur = sum(valeur, na.rm = T)) %>% ungroup() %>% tail()
byGroupTot
adat
dataa2 %>% group_by(isco, nat) %>% summarise(valeur = sum(valeur, na.rm = T))
dataa2
dataa2 %>% group_by(isco, nat) %>% summarise(valeur = sum(valeur, na.rm = T, description = description))
dataa2 %>% group_by(isco, nat) %>% summarise(valeur = sum(valeur, na.rm = T), description = description)
dataa2 %>% group_by(isco, nat) %>% summarise(valeur = sum(valeur, na.rm = T), description = unique(description))
dataa2 %>% group_by(isco, nat) %>% summarise(valeur = sum(valeur, na.rm = T), description = description[1])
dataa2 %>% group_by(isco, nat) %>%
summarise(valeur = sum(valeur, na.rm = T), description = description[1]) %>%
ungroup() %>%
group_by(isco) %>% mutate(tot = sum(valeur, na.rm = T)) %>%
ungroup() %>%
mutate(share = (valeur / tot) * 100)
dataa2 %>% group_by(isco, nat) %>%
summarise(valeur = sum(valeur, na.rm = T), description = description[1]) %>%
ungroup() %>%
group_by(isco) %>% mutate(tot = sum(valeur, na.rm = T))
dataa2 %>% group_by(isco, nat) %>%
summarise(valeur = sum(valeur, na.rm = T), description = description[1]) %>%
ungroup() %>%
group_by(isco) %>% mutate(tot = sum(valeur, na.rm = T)) %>%
ungroup() %>%
mutate(share = (valeur / tot) * 100)
dataa2
dataa2 %>% group_by(isco, nat) %>%
summarise(valeur = sum(valeur, na.rm = T), description = description[1]) %>%
ungroup() %>%
group_by(isco) %>% mutate(tot = sum(valeur, na.rm = T)) %>%
ungroup() %>%
mutate(share = (valeur / tot) * 100)
dataa2 %>% group_by(nat) %>% summarise(tot = sum(valeur, na.rm = T))
1159877 / (1159877 + 2816968)
dataa2 %>% group_by(nat) %>% summarise(tot = sum(valeur, na.rm = T))
dataa2 %>% group_by(nat) %>% summarise(tot = sum(valeur, na.rm = T)) %>% ungroup()
dataa2 %>% group_by(nat) %>% summarise(tot = sum(valeur, na.rm = T)) %>%
ungroup() %>% mutate(overallShare = tot / sum(tot))
dataa2 %>% group_by(isco, nat) %>%
summarise(valeur = sum(valeur, na.rm = T), description = description[1]) %>%
ungroup() %>%
group_by(isco) %>% mutate(tot = sum(valeur, na.rm = T)) %>%
ungroup() %>%
mutate(share = (valeur / tot) * 100)
# compute the overall % foreigners
overallShare <- dataa2 %>% group_by(nat) %>% summarise(tot = sum(valeur, na.rm = T)) %>%
ungroup() %>% mutate(overallShare = tot / sum(tot)) %>% ungroup()
overallShare
left_join(dataa2, overallShare %>% select(-tot))
dataa2 <- data %>% filter(isco >= 1000) %>%
mutate(group = factor(isco %/% 1000), nat = ifelse(lieuNaissance == "Suisse", "Suisse", "etranger")) %>%
select(-lieuNaissance)
dataa2 %>% group_by(isco, nat) %>%
summarise(valeur = sum(valeur, na.rm = T), description = description[1]) %>%
ungroup() %>%
group_by(isco) %>% mutate(tot = sum(valeur, na.rm = T)) %>%
ungroup() %>%
mutate(share = (valeur / tot) * 100)
# compute the overall % foreigners
overallShare <- dataa2 %>% group_by(nat) %>% summarise(tot = sum(valeur, na.rm = T)) %>%
ungroup() %>% mutate(overallShare = tot / sum(tot)) %>% ungroup()
dataa2 <- left_join(dataa2, overallShare %>% select(-tot))
dataa2
dataa2 <- data %>% filter(isco >= 1000) %>%
mutate(group = factor(isco %/% 1000), nat = ifelse(lieuNaissance == "Suisse", "Suisse", "etranger")) %>%
select(-lieuNaissance)
dataa2 %>% group_by(isco, nat) %>%
summarise(valeur = sum(valeur, na.rm = T), description = description[1]) %>%
ungroup() %>%
group_by(isco) %>% mutate(tot = sum(valeur, na.rm = T)) %>%
ungroup() %>%
mutate(share = (valeur / tot) * 100)
dataa2
dataa2 <- data %>% filter(isco >= 1000) %>%
mutate(group = factor(isco %/% 1000), nat = ifelse(lieuNaissance == "Suisse", "Suisse", "etranger")) %>%
select(-lieuNaissance)
dataa2 %<>% group_by(isco, nat) %>%
summarise(valeur = sum(valeur, na.rm = T), description = description[1]) %>%
ungroup() %>%
group_by(isco) %>% mutate(tot = sum(valeur, na.rm = T)) %>%
ungroup() %>%
mutate(share = (valeur / tot) * 100)
dataa2
overallShare <- dataa2 %>% group_by(nat) %>% summarise(tot = sum(valeur, na.rm = T)) %>%
ungroup() %>% mutate(overallShare = tot / sum(tot)) %>% ungroup()
dataa2 <- left_join(dataa2, overallShare %>% select(-tot))
dataa2
dataa2 <- data %>% filter(isco >= 1000) %>%
mutate(group = factor(isco %/% 1000), nat = ifelse(lieuNaissance == "Suisse", "Suisse", "etranger")) %>%
select(-lieuNaissance)
dataa2 %<>% group_by(isco, nat) %>%
summarise(valeur = sum(valeur, na.rm = T), description = description[1]) %>%
ungroup() %>%
group_by(isco) %>% mutate(tot = sum(valeur, na.rm = T)) %>%
ungroup() %>%
mutate(share = (valeur / tot) * 100)
# compute the overall % foreigners
overallShare <- dataa2 %>% group_by(nat) %>% summarise(tot = sum(valeur, na.rm = T)) %>%
ungroup() %>% mutate(overallShare = (tot / sum(tot))*100) %>% ungroup()
dataa2 <- left_join(dataa2, overallShare %>% select(-tot)) %>%
mutate(dev = share - overallShare)
dataa2
dataa2
dataa2 %>% filter(abs(dev) > 30)
dataa2 %>% filter(abs(dev) > 30) %>% View()
dataa2 %>% filter(abs(dev) > 35, nat == "etranger")
dataa2 %>% filter(abs(dev) > 50, nat == "etranger") %>%
knitr::kable(caption = "isco showing a deviation from 30 percentage point against overall share")
dataa2 %>% filter(abs(dev) > 35, nat == "etranger")
dataa2 %>% filter(share > 50, nat == "etranger")
dataa2 %>% filter(share > 90, nat == "Suisse") %>%
knitr::kable(caption = "jobs where there is a nearly only Swiss")
dataa2 %>% filter(share > 90, nat == "Suisse", valeur > 500) %>%
knitr::kable(caption = "jobs where there is a nearly only Swiss")
dataa2 %>% filter(share > 55, nat == "etranger") %>%
knitr::kable(caption = "jobs where there is a majority of foreigners")
dataa %>% group_by(lieuNaissance) %>% summarise(test = sum(shareTot), test2 = sum(shareIsco, na.rm = T))
dataa %>% group_by(lieuNaissance) %>% summarise(test = sum(shareTot), test2 = sum(shareIsco, na.rm = T)) %>% ungroup()
dataa %>% group_by(lieuNaissance) %>% summarise(test = sum(shareTot), test2 = sum(shareIsco, na.rm = T)) %>%
ungroup()
